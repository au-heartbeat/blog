[{"categories":[""],"content":"概述 在软件开发和测试过程中，为了提高效率并减少对实际服务的依赖，我们常常使用存根服务器（Stub Server）和模拟服务器（Mock Server）这两种工具。存根服务 器和模拟服务器都是用于模拟外部依赖项的行为，但它们有不同的实现方式和用途。 本文将介绍存根服务器和模拟服务器的概念、为什么要使用存根服务器和模拟服务器，它们的优势和用途，以及如何在开发和测试中使用它们来提高效率和可靠性。 ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:1:0","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"Mock Server ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:2:0","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"什么是Mock Server？ Mock Server是一种模拟服务器，用于模仿API的真实行为。它通过模拟真实的服务，为来自客户端的请求提供真实响应。在开发和测试中，Mock Server发挥着重要的 作用。 它可以在本地计算机或云服务器上运行，拦截应用程序发出的请求，并返回预定义的响应。 ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:2:1","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"为什么要使用Mock Server？ 提高开发效率 在开发过程中，某些依赖的服务可能尚未准备就绪或不可访问。使用Mock server可以模拟这些服务的行为，使开发人员能够继续工作而不会受到阻碍。有助于前端 和后端开发人员在服务尚未准备好或不可用的情况下独立进行开发。 前端团队可以利用Mock Server模拟API响应，无需等待实际后端服务的就绪，从而节省时间和资源，加快开发和测试周期。 同时，Mock Server的使用使前端和后端开发人员能够并行开发，因为它们可以依据预定义的API规范和模拟响应进行工作，而无需相互依赖。 这种独立且并行的开发方式提高了团队的整体效率，并促进了协作的灵活性和敏捷性。 模拟各种场景 Mock Server可以模拟各种请求和响应场景，包括成功响应、错误响应、边界条件和异常情况。这样可以更全面地测试应用程序的行为，提高应用程序的质量和可靠性。 隔离和独立性 Mock server允许开发人员将应用程序与外部依赖项（如第三方API或服务）隔离开来，从而使开发和测试更加独立和可控。这样可以避免对实际服务产生不必要的 依赖，提高开发效率和测试可靠性。 性能测试和负载测试 Mock server可以用于模拟高负载条件，从而进行性能测试和负载测试，以评估应用程序在真实环境中的表现。 总的来说，Mock Server的使用可以提高开发效率，支持并行开发，模拟各种场景，隔离依赖服务，并用于性能测试和负载测试。它是一个强大的工具，帮助开发人 员构建和测试应用程序，同时降低对实际服务的依赖性。 ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:2:2","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"如何搭建Mock server？ 搭Mock Server的方式有很多种，以下是一些常见的方式： 使用Mock Server框架：有许多专门用于搭建Mock Server的框架可供选择，例如MockServer、Prism、WireMock等。这些框架提供了简单易用的接口和配置 选项，可以快速搭建和配置Mock Server。 常用框架 xx xx xx 自定义代码：可以使用编写程序语言（如Java、Python、Node.js等）来编写自定义的模拟服务器，处理来自客户端的请求，并返回预定义的响应。 使用API开发工具：一些API开发工具（如Postman、Swagger等）提供了Mock Server的功能。可以使用这些工具创建和管理Mock API，并根据需要配备设置请 求和响应。 ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:2:3","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"Stub Server ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:3:0","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"什么是Stub Server 服务存根是对实际服务的模拟，可用来在功能上替换测试环境中的服务。 存根服务器用于替换实际应用程序服务器。 从客户机应用程序的角度来看，服务存根看起来与其模拟的实际服务相同。 要使用服务存根来替换实际服务，必须能够将客户机应用程序中原始服务的 URL 替换为存根服务器的 URL。 ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:3:1","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"为什么要使用Stub Server？ ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:3:2","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"如何搭建Stub Server ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:3:3","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"HeartBeat使用Stubby4j搭建Stub Server HeartBeat使用Stubby4j作为存根服务器来构建我们的服务。所有第三方服务都存根在一个存根服务器中。 ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:4:0","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"为何选择Stubby4j？ ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:4:1","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"构建示例 ","date":"2023-04-24","objectID":"/blog/2023/04/mocksever/:4:2","tags":[""],"title":"Mock Server and Stub Server","uri":"/blog/2023/04/mocksever/"},{"categories":[""],"content":"使用 Git Action 实现CI/CD 有关于CI/CD的概念，想必大家都非常熟悉。今天跟大家分享这篇文章，主要是想分享记录一下，在HeartBeat内部项目中，我们怎么实现代码的CI/CD的。我主要从以下几方面来跟大家分享。 CI/CD的简单概述 部署CI/CD的工具 Git Action以及Why use it? How to use Git Action? ","date":"2023-04-24","objectID":"/blog/2023/04/cicd/:1:0","tags":[""],"title":"CI/CD","uri":"/blog/2023/04/cicd/"},{"categories":[""],"content":"CI/CD CI指持续集成（Continuous Integration） CD指持续交付/持续部署（Continuous Delivery/Continuous Deployment）的缩写。 持续集成是指在开发过程中，团队成员经常地提交代码到一个共享代码仓库中，然后自动地进行构建、测试、代码质量检查等流程，以尽早地发现和解决潜在的问题。 持续交付/持续部署则是指将已经通过了所有自动化测试的代码，自动地部署到生产环境中，以提高软件交付的速度和质量，并且可以快速地响应客户需求和反馈。 ","date":"2023-04-24","objectID":"/blog/2023/04/cicd/:1:1","tags":[""],"title":"CI/CD","uri":"/blog/2023/04/cicd/"},{"categories":[""],"content":"部署CI/CD的工具 部署 CI/CD 的工具有很多，下面我就简单列举一些主流的工具及其优缺点. 工具名 优点 缺点 Jenkins 开源、免费、功能强大、插件丰富，可与各种工具集成，支持多个操作系统。 需要自己维护和扩展。 Travis CI 适用于开源项目，易于设置和使用，集成度高，支持多种编程语言和框架。 需要付费才能获得更高级别的功能和支持。 CircleCI 基于云服务，易于设置和使用，与多个工具集成，支持多个操作系统和编程语言。 需要付费才能获得更高级别的功能和支持。 GitLab CI/CD GitLab 自带的 CI/CD 工具，与 GitLab 无缝集成，易于设置和使用，支持多种编程语言和框架，可自定义 CI/CD 流程。 可能需要额外的硬件资源来支持 CI/CD 流程。 Bamboo 易于设置和使用，支持多种操作系统和编程语言，与 JIRA 等 Atlassian 产品集成，可扩展性强。 需要付费才能获得更高级别的功能和支持。 GitLab CI/CD GitLab 自带的 CI/CD 工具，与 GitLab 无缝集成，易于设置和使用，支持多种编程语言和框架，可自定义 CI/CD 流程。 可能需要付费才能获得更高级别的功能和支持。 ","date":"2023-04-24","objectID":"/blog/2023/04/cicd/:1:2","tags":[""],"title":"CI/CD","uri":"/blog/2023/04/cicd/"},{"categories":[""],"content":"Git Action Git Actions是一个持续集成和持续部署（CI/CD）平台，由GitHub提供。使用Git Actions，您可以在代码存储库中配置和自动化软件开发生命周期中的工作流程，包括测试、构建和部署。 HeartBeat是我司的内部项目，其是一种了解项目交付情况的工具，可帮助团队确定绩效指标，从而推动持续改进并提高团队生产力和效率。因此团队还不是完全获取一些付费资源的支持。基于此，我们选择Git Action部署项目CI/CD，并且免费的资源完全支持项目当前运行。 ","date":"2023-04-24","objectID":"/blog/2023/04/cicd/:1:3","tags":[""],"title":"CI/CD","uri":"/blog/2023/04/cicd/"},{"categories":[""],"content":"如何使用Git Action部署CI/CD 在你的GitHub上的存储库中创建一个目录.github/workflows 在该.github/workflows目录中，创建一个名为buildAndDeploy.yml的文件 将当前内容commit并push至仓库，创建pull request。工作流提交到存储库中的分支会触发事件push并运行工作流。 至此，一个简单的CI/CD就部署成功啦。 那如何快速查看工作流程结果呢？ 这里将以HeartBeat CI/CD部署为例，查看工作流程结果。 进入GitHub仓库主页，单击 Actions GitActionIcon 在左侧边栏中，单击要显示的工作流. GitActionJobs 从工作流程运行列表中，单击要查看的运行名称，以为“frontend checked举例，正在测试 GitHub Actions”。 DetailSteps 日志显示每个步骤是如何处理的。展开任何步骤以查看其详细信息。 DetailInfoAboutEachStep 以下是HeartBeat完整CI/CD workFlows BuildAndDeploy Deadline 2023-05-10 ","date":"2023-04-24","objectID":"/blog/2023/04/cicd/:1:4","tags":[""],"title":"CI/CD","uri":"/blog/2023/04/cicd/"},{"categories":[""],"content":"Deadline 需给每个文章设置Deadline， 并放置在文章顶部 2023-05-31 ","date":"2023-04-15","objectID":"/blog/2023/04/requirement/:1:0","tags":[""],"title":"Blog 要求","uri":"/blog/2023/04/requirement/"}]